package expressions

import (
	"regexp"
	"strings"
)

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func precedence(op byte) int {
	switch op {
	case '+', '-':
		return 1
	case '*', '/':
		return 2
	}
	return 0
}

// –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Validate
// –§—É–Ω–∫–∏—Ü—è —Ä–µ–∫—É—Å—Ä—Å–∏–≤–Ω–æ —á–∏—Ç–∞–µ—Ç –∫–∞–∂–¥—É—é —Å–∫–æ–±–∫—É –∏ –∫–æ—Ä–Ω–µ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
// –û–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {—á–∏—Å–ª–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö(—á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫ –Ω–µ –≤–∞–∂–Ω–æ)} ({–∑–Ω–∞–∫}{—á–∏—Å–ª–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö})  // –í—Ç–æ—Ä–∞—è –±–æ–ª—å—à–∞—è —Å–∫–æ–±–∫–∞ —Å–æ {–∑–Ω–∞–∫} –º–æ–∂–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –ª—é–±–æ–µ –∫–æ–ª–≤–æ —Ä–∞–∑
var mathRegRoot, _ = regexp.Compile(`^ *(\d+(\.\d+)?|\([^()]*((\([^()]*)*([^()]*\))*)[^()]*\))( *[+\-*/] *(\d+(\.\d+)?|\([^()]*((\([^()]*)*([^()]*\))*)[^()]*\)))* *$`) // üíÄ

func Validate(infix string) bool {
	if !mathRegRoot.MatchString(infix) || strings.Count(infix, "(") != strings.Count(infix, ")") {
		return false
	}
	res := ""
	brCount := 0
	brr := false
	for _, i := range infix {
		switch string(i) {
		case "(":
			brCount += 1
			brr = true
		case ")":
			brCount -= 1
			if brCount < 0 {
				return false
			}
		}
		if brCount != 0 {
			res += string(i)
		}
		if brCount == 0 && len(res) >= 2 && brr {
			if string(i) != infix && !Validate(res[1:]) {
				return false
			}
			res = ""
			brr = false
		}
	}
	return true
}

// InfixToPostfix –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–∏–∫—Å–Ω–æ–π —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ—Å—Ç—Ñ–∏–∫—Å–Ω—É—é
func InfixToPostfix(infix string) string {
	var result strings.Builder
	var stack []byte

	for _, ch := range infix {
		switch ch {
		case ' ':
			continue
		case '+', '-', '*', '/':
			for len(stack) > 0 && precedence(stack[len(stack)-1]) >= precedence(byte(ch)) {
				result.WriteByte(' ')
				result.WriteByte(stack[len(stack)-1])
				stack = stack[:len(stack)-1]
			}
			result.WriteByte(' ')
			stack = append(stack, byte(ch))
		case '(':
			stack = append(stack, byte(ch))
		case ')':
			for len(stack) > 0 && stack[len(stack)-1] != '(' {
				result.WriteByte(' ')
				result.WriteByte(stack[len(stack)-1])
				stack = stack[:len(stack)-1]
			}
			stack = stack[:len(stack)-1]
		default:
			// –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª - —Ü–∏—Ñ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –≤—ã—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
			result.WriteString(string(ch))
		}
	}

	for len(stack) > 0 {
		result.WriteByte(' ')
		result.WriteByte(stack[len(stack)-1])
		stack = stack[:len(stack)-1]
	}
	return result.String()
}
